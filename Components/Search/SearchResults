import React from "react";
import { Link } from "react-router-dom";
import { createPageUrl } from "@/utils";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Skeleton } from "@/components/ui/skeleton";
import { Star, ShoppingCart, Percent, Truck, Zap, Globe } from "lucide-react";
import { Cart as CartEntity } from "@/entities/Cart";

export default function SearchResults({ products, isLoading, viewMode, isSearchingWeb }) {
  const addToCart = async (product, e) => {
    e.preventDefault();
    e.stopPropagation();
    
    try {
      // Check if item already in cart
      const existingCartItems = await CartEntity.filter({product_id: product.id});
      
      if (existingCartItems.length > 0) {
        // Update quantity
        const existingItem = existingCartItems[0];
        await CartEntity.update(existingItem.id, {
          quantity: existingItem.quantity + 1
        });
      } else {
        // Add new item
        await CartEntity.create({
          product_id: product.id,
          quantity: 1,
          price_at_time: product.price
        });
      }
      
      // Refresh page to update cart count
      window.location.reload();
    } catch (error) {
      console.error("Error adding to cart:", error);
    }
  };

  if (isLoading || (isSearchingWeb && products.length === 0)) {
    return (
      <div className={viewMode === "grid" ? "grid md:grid-cols-2 lg:grid-cols-3 gap-6" : "space-y-4"}>
        {Array(6).fill(0).map((_, i) => (
          <Card key={i} className="border-0 shadow-md">
            <CardContent className="p-6">
              {viewMode === "grid" && <Skeleton className="h-48 w-full mb-4 rounded-lg" />}
              <Skeleton className="h-4 w-3/4 mb-2" />
              <Skeleton className="h-4 w-1/2 mb-4" />
              <Skeleton className="h-8 w-full" />
            </CardContent>
          </Card>
        ))}
      </div>
    );
  }

  if (products.length === 0 && !isSearchingWeb) {
    return (
      <div className="text-center py-16">
        <div className="mb-4">
          <Globe className="h-16 w-16 text-slate-300 mx-auto" />
        </div>
        <h3 className="text-xl font-semibold text-slate-900 mb-2">No products found</h3>
        <p className="text-slate-600">Try a different search term - we'll scan the web for the best deals!</p>
      </div>
    );
  }

  if (viewMode === "list") {
    return (
      <div className="space-y-4">
        {/* Show web search status */}
        {isSearchingWeb && products.length > 0 && (
          <Card className="border-orange-200 bg-orange-50">
            <CardContent className="p-4">
              <div className="flex items-center gap-2 text-orange-700">
                <Zap className="w-4 h-4 animate-pulse" />
                <span className="text-sm font-medium">Finding more deals...</span>
              </div>
            </CardContent>
          </Card>
        )}
        
        {products.map((product) => (
          <Card key={product.id} className="border-0 shadow-md hover:shadow-lg transition-shadow">
            <CardContent className="p-6">
              <div className="flex gap-6">
                <img
                  src={product.image_url || "https://images.unsplash.com/photo-1560472354-b33ff0c44a43?w=200"}
                  alt={product.name}
                  className="w-24 h-24 object-cover rounded-lg"
                />
                <div className="flex-1">
                  <div className="flex justify-between items-start mb-2">
                    <Link to={createPageUrl("ProductDetail") + "?id=" + product.id}>
                      <h3 className="font-bold text-slate-900 text-lg hover:text-orange-600 transition-colors">{product.name}</h3>
                    </Link>
                    <div className="flex gap-2">
                      {product.discount_percent > 0 && (
                        <Badge className="bg-red-500 text-white">
                          <Percent className="w-3 h-3 mr-1" />
                          {product.discount_percent}% OFF
                        </Badge>
                      )}
                      <Badge className="bg-green-500 text-white">
                        <Globe className="w-3 h-3 mr-1" />
                        Best Price
                      </Badge>
                    </div>
                  </div>
                  
                  <div className="flex items-center mb-2">
                    <div className="flex items-center mr-3">
                      {Array(5).fill(0).map((_, i) => (
                        <Star key={i} className={`w-4 h-4 ${i < Math.floor(product.rating || 4.5) ? 'fill-amber-400 text-amber-400' : 'text-slate-300'}`} />
                      ))}
                    </div>
                    <span className="text-sm text-slate-500">({product.review_count || 0})</span>
                    {product.is_prime_eligible && (
                      <Badge variant="outline" className="ml-4 text-orange-600 border-orange-200">
                        <Truck className="w-3 h-3 mr-1" />
                        Fast Shipping
                      </Badge>
                    )}
                  </div>

                  <p className="text-slate-600 mb-3 line-clamp-2">{product.description}</p>
                  
                  <div className="text-xs text-slate-500 mb-3">
                    Sourced from: {product.supplier_info?.supplier_name || 'Best available retailer'}
                  </div>

                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-4">
                      <span className="text-2xl font-bold text-orange-600">
                        ${product.price?.toFixed(2)}
                      </span>
                      {product.original_retail_price > product.price && (
                        <span className="text-lg text-slate-500 line-through">
                          ${product.original_retail_price.toFixed(2)}
                        </span>
                      )}
                      <span className="text-sm text-green-600 font-medium">
                        Lowest price found
                      </span>
                    </div>
                    
                    <div className="flex gap-2">
                      <Link to={createPageUrl("ProductDetail") + "?id=" + product.id}>
                        <Button variant="outline">
                          View Details
                        </Button>
                      </Link>
                      <Button 
                        className="bg-orange-500 hover:bg-orange-600"
                        onClick={(e) => addToCart(product, e)}
                      >
                        <ShoppingCart className="ml-2 w-4 h-4" />
                        Add to Cart
                      </Button>
                    </div>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Show web search status */}
      {isSearchingWeb && products.length > 0 && (
        <Card className="border-orange-200 bg-orange-50">
          <CardContent className="p-4">
            <div className="flex items-center gap-2 text-orange-700">
              <Zap className="w-4 h-4 animate-pulse" />
              <span className="text-sm font-medium">Still scanning for more deals...</span>
            </div>
          </CardContent>
        </Card>
      )}
      
      <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
        {products.map((product) => (
          <Card key={product.id} className="border-0 shadow-md hover:shadow-lg transition-shadow group">
            <CardContent className="p-0">
              <Link to={createPageUrl("ProductDetail") + "?id=" + product.id}>
                <div className="relative">
                  <img
                    src={product.image_url || "https://images.unsplash.com/photo-1560472354-b33ff0c44a43?w=400"}
                    alt={product.name}
                    className="w-full h-48 object-cover rounded-t-lg"
                  />
                  <div className="absolute top-3 left-3 flex gap-2">
                    {product.discount_percent > 0 && (
                      <Badge className="bg-red-500 text-white">
                        <Percent className="w-3 h-3 mr-1" />
                        {product.discount_percent}% OFF
                      </Badge>
                    )}
                    <Badge className="bg-green-500 text-white">
                      <Globe className="w-3 h-3 mr-1" />
                      Best Price
                    </Badge>
                  </div>
                  {product.is_prime_eligible && (
                    <Badge className="absolute top-3 right-3 bg-orange-500 text-white">
                      <Truck className="w-3 h-3 mr-1" />
                      Fast
                    </Badge>
                  )}
                </div>
              </Link>
              
              <div className="p-6">
                <Link to={createPageUrl("ProductDetail") + "?id=" + product.id}>
                  <h3 className="font-bold text-slate-900 mb-2 group-hover:text-orange-600 transition-colors line-clamp-2">
                    {product.name}
                  </h3>
                </Link>
                
                <div className="flex items-center mb-3">
                  <div className="flex items-center">
                    {Array(5).fill(0).map((_, i) => (
                      <Star key={i} className={`w-4 h-4 ${i < Math.floor(product.rating || 4.5) ? 'fill-amber-400 text-amber-400' : 'text-slate-300'}`} />
                    ))}
                  </div>
                  <span className="text-sm text-slate-500 ml-2">({product.review_count || 0})</span>
                </div>

                <div className="text-xs text-slate-500 mb-3">
                  Sourced from: {product.supplier_info?.supplier_name || 'Best retailer'}
                </div>

                <div className="flex items-center justify-between mb-4">
                  <div className="flex flex-col">
                    <span className="text-2xl font-bold text-orange-600">
                      ${product.price?.toFixed(2)}
                    </span>
                    {product.original_retail_price > product.price && (
                      <span className="text-sm text-slate-500 line-through">
                        ${product.original_retail_price.toFixed(2)}
                      </span>
                    )}
                    <span className="text-xs text-green-600 font-medium">
                      Lowest found online
                    </span>
                  </div>
                  <div className="text-right text-sm">
                    <div className="text-slate-600">In Stock: {product.stock_quantity || 100}</div>
                  </div>
                </div>

                <Button 
                  className="w-full bg-orange-500 hover:bg-orange-600 text-white"
                  onClick={(e) => addToCart(product, e)}
                >
                  <ShoppingCart className="w-4 h-4 mr-2" />
                  Add to Cart
                </Button>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );
}
